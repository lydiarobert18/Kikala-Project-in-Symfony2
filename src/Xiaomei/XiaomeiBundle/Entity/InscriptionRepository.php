<?php

namespace Xiaomei\XiaomeiBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * InscriptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InscriptionRepository extends EntityRepository

{  public function findFullSingleContent($userid,$id){

		$query = $this->createQueryBuilder('i')
				->select( "COUNT ( i)"	)//hyper facile à oublier
			    ->where('cours.id = :id')
			    ->andwhere('user.id = :id2')
			    ->leftJoin('i.cours', 'cours')
			    ->leftJoin('i.user', 'user')		
			    ->setParameter(':id', $id)
			     ->setParameter(':id2', $userid)
			    ->getQuery();

		$dejainscrit = $query->getSingleResult();
       
		return $dejainscrit;
}

/*SELECT Shippers.ShipperName,COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders
LEFT JOIN Shippers
ON Orders.ShipperID=Shippers.ShipperID
GROUP BY ShipperName;*/

  public function coursrecommendation($arrayuserid){
           $query = $this->createQueryBuilder('i')            
          ->select("cours.id,COUNT(cours.id) as c")
          //ajouter condition cours.id !==$coursid;
           ->where('user.id in (:arrayuserid)')
           //->whereIn('user.id =:arrayid')
          ->leftJoin('i.user', 'user') 
          ->leftJoin('i.cours', 'cours')
          ->groupBy( 'cours.id' )
           ->setParameter(':arrayuserid', $arrayuserid)
           ->orderBy('c','DESC')
           ->setMaxResults(5)
          ->getQuery();

   $coursrecommendation_resulat = $query->getResult();
       
    return $coursrecommendation_resulat;
  }


   public function findnombreinscrit($idcours){
          $query = $this->createQueryBuilder('i')
          ->select( "COUNT ( i)"  )
          ->leftJoin('i.cours', 'cours')
           ->where('cours.id = :id')
           ->andWhere('i.isannulation=false')
          ->setParameter('id', $idcours)
        ->getQuery();
         $nombreinscrit = $query->getSingleScalarResult();
       
    return $nombreinscrit;
    }

    public function nombreinscritannule($idcours){
          $query = $this->createQueryBuilder('i')
          ->select( "COUNT ( i)"  )
          ->leftJoin('i.cours', 'cours')
           ->where('cours.id = :id')
           ->andWhere('i.isannulation=true')
          ->setParameter('id', $idcours)
        ->getQuery();
         $nombredésinscrit = $query->getSingleScalarResult();
       
    return $nombredésinscrit;
    }

}
